config
addpath(PATH_TO_CONTROL_MODEL)

% build the grey box model
% this is the answer we were getting with the roll rate arx
guess = [39.3, -0.018, 209.895, 0.081, 0.799, 37];
% thes are the gains from Ron's method
%guess = [76.3808, -0.0516, 7.2456, 0.2632, 0.0708, 30];
data = generate_data('Rigid', 3.0, ...
                     'simulate', 0, ...
                     'loopTransfer', 0, ...
                     'handlingQuality', 0, ...
                     'gains', guess(1:5), ...
                     'neuroFreq', guess(6), ...
                     'forceTransfer', {}, ...
                     'display', 0);
% get the state space model so we don't have to calculate it during the gain
% matching algorithm
aux.bicycle.A = data.modelPar.A;
aux.bicycle.B = data.modelPar.B;
aux.bicycle.C = data.modelPar.C;
aux.bicycle.D = data.modelPar.D;
aux.bicycle.x = {'xP', 'yP', 'psi', 'phi', 'theta', 'thetaR', 'delta', ...
             'thetaF', 'phiDot', 'thetaRDot', 'deltaDot'};
aux.bicycle.y = {'xP', 'yP', 'psi', 'phi', 'theta', 'thetaR', 'delta', ...
             'thetaF', 'xPDot', 'yPDot', 'psiDot', 'phiDot', ...
             'thetaDot', 'thetaRDot', 'deltaDot', 'thetaFDot', 'xQ', 'yQ'}
aux.bicycle.u = {'tPhi', 'tDelta', 'fB'};
%aux.outputs = {'xP', 'yP', 'psi', 'phi', 'theta', 'thetaR', 'delta', ...
               %'thetaF', 'xPDot', 'yPDot', 'psiDot', 'phiDot', ...
               %'thetaDot', 'thetaRDot', 'deltaDot', 'thetaFDot', ...
               %'xQ', 'yQ', 'tDelta'};
aux.outputs = {'phiDot'};
aux.inputs = {'fB'};

m = idgrey('linear_parameterization', guess, 'c', aux, 'DisturbanceModel', 'Estimate');
m.InputName = {'fB'};
m.OutputName = aux.outputs;
m.StateName = [aux.bicycle.x, 'tDelta', 'tDeltaDot'];

% load the data
z = build_id_data('00105.mat', aux.outputs);
